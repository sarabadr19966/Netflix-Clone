{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\netflix-clone\\\\src\\\\NetflixClone\\\\Screens\\\\HomeScreen\\\\HomeContent\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from '../../../axios';\nimport './Row.css';\nimport Youtube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Row = ({\n  title,\n  urlRequest,\n  isLarge\n}) => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  const baseURL = 'https://image.tmdb.org/t/p/original/';\n  const opts = {\n    height: '300px',\n    width: '100%',\n    playerVars: {\n      'autoplay': 1,\n      'controls': 0,\n      'autohide': 1,\n      'wmode': 'opaque',\n      'origin': 'http://localhost:8100'\n    }\n  };\n  useEffect(() => {\n    axios.get(urlRequest).then(res => setMovies(res.data.results)).catch(error => console.log(error));\n  }, [urlRequest]);\n\n  const posterClicked = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      document.getElementById(movie.name).style.display = 'block';\n      movieTrailer(movie.name || movie.title || movie.original_title || movie.original_name || '').then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(err => console.log(err));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"row__title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => {\n        if (movie.backdrop_path !== null) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `${baseURL}${isLarge ? movie.poster_path : movie.backdrop_path}`,\n              onClick: () => posterClicked(movie),\n              alt: movie.name,\n              className: `row__poster ${isLarge ? 'row__largePoster' : ''}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: movie.name,\n              children: [trailerUrl && /*#__PURE__*/_jsxDEV(Youtube, {\n                className: \"row__trailer\",\n                videoId: trailerUrl,\n                opts: opts\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 56\n              }, this), \"  \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 21\n            }, this)]\n          }, movie.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 28\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Row, \"zcdNe0Lr8rip4Oj/qSSLGY8Tl3o=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["D:/react/netflix-clone/src/NetflixClone/Screens/HomeScreen/HomeContent/Row.js"],"names":["React","useState","useEffect","axios","Youtube","movieTrailer","Row","title","urlRequest","isLarge","movies","setMovies","trailerUrl","setTrailerUrl","baseURL","opts","height","width","playerVars","get","then","res","data","results","catch","error","console","log","posterClicked","movie","document","getElementById","name","style","display","original_title","original_name","url","urlParams","URLSearchParams","URL","search","err","map","backdrop_path","poster_path","id"],"mappings":"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","sourcesContent":["import React, {useState ,useEffect} from 'react'\r\nimport axios from '../../../axios';\r\nimport './Row.css';\r\nimport Youtube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst Row = ({title ,urlRequest, isLarge}) => {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState('');\r\n    const baseURL = 'https://image.tmdb.org/t/p/original/';\r\n    const opts = {\r\n        height : '300px',\r\n        width : '100%',\r\n        playerVars: { \r\n            'autoplay': 1,\r\n            'controls': 0,\r\n            'autohide': 1,\r\n            'wmode': 'opaque',\r\n            'origin': 'http://localhost:8100' \r\n        },\r\n    };\r\n\r\n    useEffect(()=>{\r\n        axios.get(urlRequest)\r\n        .then(res=>setMovies(res.data.results))\r\n        .catch(error=>console.log(error))\r\n    },[urlRequest]);\r\n\r\n    const posterClicked = movie => {\r\n\r\n        if(trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            document.getElementById(movie.name).style.display = 'block';\r\n            movieTrailer(movie.name || movie.title || movie.original_title || movie.original_name ||'')\r\n            .then(url => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch(err => console.log(err));\r\n        }\r\n\r\n    }\r\n    \r\n    return <div className='row'>\r\n        <h2 className='row__title'>{title}</h2>\r\n        <div className='row__posters'>\r\n            {movies.map(movie => {\r\n                if(movie.backdrop_path !== null){\r\n                    return <div key={movie.id} \r\n                    >\r\n                     <img src={`${baseURL}${isLarge ? movie.poster_path : movie.backdrop_path }`} onClick={() => posterClicked(movie)}\r\n                    alt={movie.name}\r\n                    className={`row__poster ${isLarge ? 'row__largePoster' : ''}`}\r\n                    />\r\n                    <div id={movie.name}>{trailerUrl &&<Youtube className='row__trailer'  videoId={trailerUrl} opts={opts}/>}  </div>  \r\n\r\n                    </div>\r\n                }\r\n            }   \r\n            )}\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\nexport default Row;"]},"metadata":{},"sourceType":"module"}