{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\netflix-clone\\\\src\\\\NetflixClone\\\\Screens\\\\HomeScreen\\\\HomeContent\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from '../../../axios';\nimport './Row.css';\nimport Youtube from 'react-youtube'; //import movieTrailer from 'movie-trailer;'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Row = ({\n  title,\n  urlRequest,\n  isLarge\n}) => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  const baseURL = 'https://image.tmdb.org/t/p/original/';\n  const opts = {\n    height: '100%',\n    width: '100%',\n    playerVars: {\n      autoPlay: 1\n    }\n  };\n  useEffect(() => {\n    axios.get(urlRequest).then(res => setMovies(res.data.results)).catch(error => console.log(error));\n  }, [urlRequest]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"row__title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => {\n        movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || '').then(url => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n        }).catch(err => console.log(err));\n\n        if (movie.backdrop_path !== null) {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `${baseURL}${isLarge ? movie.poster_path : movie.backdrop_path}`,\n              alt: movie.name,\n              className: `row__poster ${isLarge ? 'row__largePoster' : ''}`\n            }, movie.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 25\n            }, this), trailerUrl && /*#__PURE__*/_jsxDEV(Youtube, {\n              videoId: trailerUrl,\n              opts: opts\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 40\n            }, this)]\n          }, void 0, true);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Row, \"zcdNe0Lr8rip4Oj/qSSLGY8Tl3o=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["D:/react/netflix-clone/src/NetflixClone/Screens/HomeScreen/HomeContent/Row.js"],"names":["React","useState","useEffect","axios","Youtube","Row","title","urlRequest","isLarge","movies","setMovies","trailerUrl","setTrailerUrl","baseURL","opts","height","width","playerVars","autoPlay","get","then","res","data","results","catch","error","console","log","map","movie","movieTrailer","name","url","urlParams","URLSearchParams","URL","search","err","backdrop_path","poster_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB,C,CACA;;;;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,UAAR;AAAoBC,EAAAA;AAApB,CAAD,KAAkC;AAAA;;AAE1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMY,OAAO,GAAG,sCAAhB;AACA,QAAMC,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAG,MADA;AAETC,IAAAA,KAAK,EAAG,MAFC;AAGTC,IAAAA,UAAU,EAAG;AACTC,MAAAA,QAAQ,EAAG;AADF;AAHJ,GAAb;AAOAhB,EAAAA,SAAS,CAAC,MAAI;AACVC,IAAAA,KAAK,CAACgB,GAAN,CAAUZ,UAAV,EACCa,IADD,CACMC,GAAG,IAAEX,SAAS,CAACW,GAAG,CAACC,IAAJ,CAASC,OAAV,CADpB,EAECC,KAFD,CAEOC,KAAK,IAAEC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAFd;AAGH,GAJQ,EAIP,CAAClB,UAAD,CAJO,CAAT;AAKA,sBAAO;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACH;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,gBAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA,YADG,eAEH;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACKG,MAAM,CAACmB,GAAP,CAAWC,KAAK,IAAI;AACjBC,QAAAA,YAAY,CAAC,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,IAAP,KAAe,EAAhB,CAAZ,CACCX,IADD,CACMY,GAAG,IAAI;AACT,gBAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAxB,UAAAA,aAAa,CAACqB,SAAS,CAACd,GAAV,CAAc,GAAd,CAAD,CAAb;AACH,SAJD,EAKCK,KALD,CAKOa,GAAG,IAAIX,OAAO,CAACC,GAAR,CAAYU,GAAZ,CALd;;AAMA,YAAGR,KAAK,CAACS,aAAN,KAAwB,IAA3B,EAAgC;AAC5B,8BAAO;AAAA,oCACH;AAAK,cAAA,GAAG,EAAG,GAAEzB,OAAQ,GAAEL,OAAO,GAAGqB,KAAK,CAACU,WAAT,GAAuBV,KAAK,CAACS,aAAe,EAA1E;AAEA,cAAA,GAAG,EAAET,KAAK,CAACE,IAFX;AAGA,cAAA,SAAS,EAAG,eAAcvB,OAAO,GAAG,kBAAH,GAAwB,EAAG;AAH5D,eACKqB,KAAK,CAACW,EADX;AAAA;AAAA;AAAA;AAAA,oBADG,EAMF7B,UAAU,iBAAI,QAAC,OAAD;AAAS,cAAA,OAAO,EAAEA,UAAlB;AAA8B,cAAA,IAAI,EAAEG;AAApC;AAAA;AAAA;AAAA;AAAA,oBANZ;AAAA,0BAAP;AAQH;AACJ,OAjBA;AADL;AAAA;AAAA;AAAA;AAAA,YAFG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAwBH,CAzCD;;GAAMT,G;;KAAAA,G;AA2CN,eAAeA,GAAf","sourcesContent":["import React, {useState ,useEffect} from 'react'\r\nimport axios from '../../../axios';\r\nimport './Row.css';\r\nimport Youtube from 'react-youtube';\r\n//import movieTrailer from 'movie-trailer;'\r\n\r\nconst Row = ({title ,urlRequest, isLarge}) => {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState('');\r\n    const baseURL = 'https://image.tmdb.org/t/p/original/';\r\n    const opts = {\r\n        height : '100%',\r\n        width : '100%',\r\n        playerVars : {\r\n            autoPlay : 1,\r\n        },\r\n    };\r\n    useEffect(()=>{\r\n        axios.get(urlRequest)\r\n        .then(res=>setMovies(res.data.results))\r\n        .catch(error=>console.log(error))\r\n    },[urlRequest])\r\n    return <div className='row'>\r\n        <h2 className='row__title'>{title}</h2>\r\n        <div className='row__posters'>\r\n            {movies.map(movie => {\r\n                movieTrailer(movie?.name || '')\r\n                .then(url => {\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n                })\r\n                .catch(err => console.log(err));\r\n                if(movie.backdrop_path !== null){\r\n                    return <>\r\n                        <img src={`${baseURL}${isLarge ? movie.poster_path : movie.backdrop_path }`}\r\n                        key={movie.id} \r\n                        alt={movie.name}\r\n                        className={`row__poster ${isLarge ? 'row__largePoster' : ''}`}\r\n                        />\r\n                        {trailerUrl && <Youtube videoId={trailerUrl} opts={opts}/>}\r\n                    </>\r\n                }\r\n            }   \r\n            )}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Row;"]},"metadata":{},"sourceType":"module"}