{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\netflix-clone\\\\src\\\\NetflixClone\\\\Screens\\\\HomeScreen\\\\HomeContent\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from '../../../axios';\nimport './Row.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Row = ({\n  title,\n  urlRequest,\n  isLarge\n}) => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const baseURL = 'https://image.tmdb.org/t/p/original/';\n  useEffect(() => {\n    axios.get(urlRequest).then(res => {\n      console.log(res.data.results);\n      setMovies(res.data.results);\n    }).catch(error => console.log(error));\n  }, [urlRequest]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"row__title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => {\n        if (movie.backdrop_path !== null) {\n          return /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `${baseURL}${isLarge ? movie.poster_path : movie.backdrop_path}`,\n            alt: movie.name,\n            className: `row__poster ${isLarge ? 'row__largePoster' : ''}`\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 28\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["D:/react/netflix-clone/src/NetflixClone/Screens/HomeScreen/HomeContent/Row.js"],"names":["React","useState","useEffect","axios","Row","title","urlRequest","isLarge","movies","setMovies","baseURL","get","then","res","console","log","data","results","catch","error","map","movie","backdrop_path","poster_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAO,WAAP;;;AACA,MAAMC,GAAG,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,UAAR;AAAoBC,EAAAA;AAApB,CAAD,KAAkC;AAAA;;AAC1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMS,OAAO,GAAG,sCAAhB;AACAR,EAAAA,SAAS,CAAC,MAAI;AACVC,IAAAA,KAAK,CAACQ,GAAN,CAAUL,UAAV,EACCM,IADD,CACMC,GAAG,IAAE;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAJ,CAASC,OAArB;AACAR,MAAAA,SAAS,CAACI,GAAG,CAACG,IAAJ,CAASC,OAAV,CAAT;AACH,KAJD,EAKCC,KALD,CAKOC,KAAK,IAAEL,OAAO,CAACC,GAAR,CAAYI,KAAZ,CALd;AAMH,GAPQ,EAOP,CAACb,UAAD,CAPO,CAAT;AAQA,sBAAO;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACH;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,gBAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA,YADG,eAEH;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACKG,MAAM,CAACY,GAAP,CAAWC,KAAK,IAAI;AACjB,YAAGA,KAAK,CAACC,aAAN,KAAwB,IAA3B,EAAgC;AAC5B,8BAAO;AAAK,YAAA,GAAG,EAAG,GAAEZ,OAAQ,GAAEH,OAAO,GAAGc,KAAK,CAACE,WAAT,GAAuBF,KAAK,CAACC,aAAe,EAA1E;AAEP,YAAA,GAAG,EAAED,KAAK,CAACG,IAFJ;AAGP,YAAA,SAAS,EAAG,eAAcjB,OAAO,GAAG,kBAAH,GAAwB,EAAG;AAHrD,aACFc,KAAK,CAACI,EADJ;AAAA;AAAA;AAAA;AAAA,kBAAP;AAMH;AACJ,OATA;AADL;AAAA;AAAA;AAAA;AAAA,YAFG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAgBH,CA3BD;;GAAMrB,G;;KAAAA,G;AA6BN,eAAeA,GAAf","sourcesContent":["import React, {useState ,useEffect} from 'react'\r\nimport axios from '../../../axios';\r\nimport './Row.css';\r\nconst Row = ({title ,urlRequest, isLarge}) => {\r\n    const [movies, setMovies] = useState([]);\r\n    const baseURL = 'https://image.tmdb.org/t/p/original/'\r\n    useEffect(()=>{\r\n        axios.get(urlRequest)\r\n        .then(res=>{\r\n            console.log(res.data.results)\r\n            setMovies(res.data.results)\r\n        })\r\n        .catch(error=>console.log(error))\r\n    },[urlRequest])\r\n    return <div className='row'>\r\n        <h2 className='row__title'>{title}</h2>\r\n        <div className='row__posters'>\r\n            {movies.map(movie => {\r\n                if(movie.backdrop_path !== null){\r\n                    return <img src={`${baseURL}${isLarge ? movie.poster_path : movie.backdrop_path }`}\r\n                    key={movie.id} \r\n                    alt={movie.name}\r\n                    className={`row__poster ${isLarge ? 'row__largePoster' : ''}`}\r\n    \r\n                    />\r\n                }\r\n            }   \r\n            )}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Row;"]},"metadata":{},"sourceType":"module"}