{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\netflix-clone\\\\src\\\\NetflixClone\\\\Netflix.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport HomeScreen from \"./Screens/HomeScreen/HomeScreen\";\nimport SignInUpScreen from './Screens/SignInUpScreens/SignInUpScreen';\nimport { auth } from '../firebase';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../store/action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Netflix = props => {\n  _s();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      if (userAuth) {\n        //logged in\n        props.logIn({\n          uID: userAuth.uid,\n          email: userAuth.email\n        });\n      } else {\n        //logged out\n        props.logOut();\n      }\n    });\n    return unsubscribe;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !props.user ? /*#__PURE__*/_jsxDEV(SignInUpScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 28\n    }, this) : /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          component: HomeScreen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Netflix, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Netflix;\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logIn: user => dispatch(actionCreators.login(user)),\n    logOut: () => dispatch(actionCreators.logout())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Netflix);\n\nvar _c;\n\n$RefreshReg$(_c, \"Netflix\");","map":{"version":3,"sources":["D:/react/netflix-clone/src/NetflixClone/Netflix.js"],"names":["React","useEffect","BrowserRouter","Router","Switch","Route","HomeScreen","SignInUpScreen","auth","connect","actionCreators","Netflix","props","unsubscribe","onAuthStateChanged","userAuth","logIn","uID","uid","email","logOut","user","mapStateToProps","state","mapDispatchToProps","dispatch","login","logout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,OAAOC,cAAP,MAA2B,0CAA3B;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAO,KAAKC,cAAZ,MAAgC,iBAAhC;;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACvBX,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,WAAW,GAAGL,IAAI,CAACM,kBAAL,CAAyBC,QAAD,IAAc;AACtD,UAAGA,QAAH,EAAa;AACT;AACAH,QAAAA,KAAK,CAACI,KAAN,CAAY;AACRC,UAAAA,GAAG,EAAGF,QAAQ,CAACG,GADP;AAERC,UAAAA,KAAK,EAAEJ,QAAQ,CAACI;AAFR,SAAZ;AAIH,OAND,MAMO;AACH;AACAP,QAAAA,KAAK,CAACQ,MAAN;AACH;AACJ,KAXmB,CAApB;AAYA,WAAOP,WAAP;AACH,GAdQ,EAcP,EAdO,CAAT;AAeA,sBAEI;AAAA,cACK,CAACD,KAAK,CAACS,IAAP,gBAAc,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAAd,gBACG,QAAC,MAAD;AAAA,6BACA,QAAC,MAAD;AAAA,+BACA,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,GAAlB;AAAsB,UAAA,SAAS,EAAEf;AAAjC;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAFR,mBAFJ;AAaH,CA7BD;;GAAMK,O;;KAAAA,O;;AA+BN,MAAMW,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHF,IAAAA,IAAI,EAAGE,KAAK,CAACF;AADV,GAAP;AAGH,CAJD;;AAMA,MAAMG,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHT,IAAAA,KAAK,EAAGK,IAAI,IAAII,QAAQ,CAACf,cAAc,CAACgB,KAAf,CAAqBL,IAArB,CAAD,CADrB;AAEHD,IAAAA,MAAM,EAAG,MAAMK,QAAQ,CAACf,cAAc,CAACiB,MAAf,EAAD;AAFpB,GAAP;AAIH,CALD;;AAOA,eAAelB,OAAO,CAACa,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cb,OAA7C,CAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport HomeScreen from \"./Screens/HomeScreen/HomeScreen\";\r\nimport SignInUpScreen from './Screens/SignInUpScreens/SignInUpScreen';\r\nimport { auth } from '../firebase';\r\nimport {connect} from 'react-redux';\r\nimport * as actionCreators from '../store/action';\r\n\r\nconst Netflix = (props) => {\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n            if(userAuth) {\r\n                //logged in\r\n                props.logIn({\r\n                    uID : userAuth.uid,\r\n                    email: userAuth.email\r\n                });\r\n            } else {\r\n                //logged out\r\n                props.logOut();\r\n            }\r\n        });\r\n        return unsubscribe;\r\n    },[])\r\n    return  (\r\n        \r\n        <>\r\n            {!props.user ? <SignInUpScreen/> :\r\n                <Router>\r\n                <Switch>\r\n                <Route exact path=\"/\" component={HomeScreen} />\r\n                </Switch>\r\n                </Router>\r\n            }\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user : state.user\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        logIn : user => dispatch(actionCreators.login(user)),\r\n        logOut : () => dispatch(actionCreators.logout())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Netflix);"]},"metadata":{},"sourceType":"module"}